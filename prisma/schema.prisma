generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Customer {
  id                        String    @id @default(cuid())
  email                     String    @unique
  firstName                 String
  lastName                  String
  phone                     String?
  password                  String
  orgNumber                 String?
  address                   String?
  country                   String?
  city                      String?
  zip                       String?
  company                   String?
  image                     String?   @db.NVarChar(MAX)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  roleId                    String
  resetPasswordToken        String? // OTP
  resetPasswordTokenExpires DateTime? // OTP expiration time
  language                  String    @default("en")
  role                      Role      @relation(fields: [roleId], references: [id])
  vcard                     VCard[]
  qr                        Qr[]
  events                    Events[]
  tickets                   Ticket[]
  shop                      Shop[]
  product                   Product[]
}

model VCard {
  id            String    @id @unique @default(cuid())
  firstName     String
  lastName      String
  tag           String
  customerEmail String?
  phone         String?
  company       String?
  title         String?
  logoType      String?   @db.NVarChar(MAX)
  image         String?   @db.NVarChar(MAX)
  linkedIn      String?
  x             String?
  facebook      String?
  instagram     String?
  snapchat      String?
  tiktok        String?
  url           String?
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String
}

model Qr {
  id         String    @id @default(cuid())
  url        String
  tag        String
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  logoType   String?   @db.NVarChar(MAX)
  customerId String
}

model Scan {
  id         String   @id @default(cuid())
  profileId  String?
  customerId String?
  type       Int      @default(0)
  count      Int      @default(1)
  scannedAt  DateTime @default(now())
}

model Role {
  id        String     @id @default(cuid())
  name      String     @unique
  customers Customer[]
}

model Events {
  id                   String       @id @default(cuid())
  eventsTitle          String?
  fromDate             DateTime?
  toDate               DateTime?
  description          String?
  numberOfTables       Int?
  availabilityPerTable Int?
  createdAt            DateTime?    @default(now())
  updatedAt            DateTime?    @updatedAt
  customer             Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId           String?
  ticket               Ticket[]
  eventTables          EventTable[] // Relation to EventTable
}

model EventTable {
  id             String    @id @default(cuid())
  tableNumber    Int? // Table number
  availableSeats Int? // Available seats for the table
  event          Events    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        String // Foreign key to Events model
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
}

model Ticket {
  id             String    @id @default(cuid())
  scanCount      String?
  fullName       String?
  guestMail      String?
  fromDate       String?
  toDate         String?
  ticketsName    String?
  eventsTitle    Events?   @relation(fields: [eventsTitleId], references: [id])
  eventsTitleId  String? // Link ticket to an event
  qrNumber       String?   @unique
  description    String?
  tableNumber    Int? // Assign ticket to a table
  amountOfPeople Int? // Define the number of people on the table for this ticket
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  customerId     String?
  customer       Customer? @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  walletObjectId String?
}

model Shop {
  id          String     @id @default(cuid())
  name        String // Name of the shop
  address     String? // Optional address of the shop
  description String? // Optional description of the shop
  customer    Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade) // Shop belongs to a customer
  customerId  String // Foreign key to Customer model
  categories  Category[] // Relation to categories
  products    Product[] // Relation to products
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String // Name of the category
  shop      Shop      @relation(fields: [shopId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Break cascading path
  shopId    String // Foreign key to Shop model
  products  Product[] // Relation to products
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  itemId      String?
  title       String
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shopId      String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  description String?   @db.NVarChar(MAX)
  image       String?   @db.NVarChar(MAX) // Add this line for the image field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer? @relation(fields: [customerId], references: [id])
  customerId  String?
}
